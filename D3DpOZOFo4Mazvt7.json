{
  "active": true,
  "connections": {
    "Daily Trigger": {
      "main": [
        [
          {
            "node": "Fetch domains to check SSL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch domains to check SSL": {
      "main": [
        [
          {
            "node": "Analyze SSL using ssl-health-assessment script over SSH",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check if SSL-Checker.io is available",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format output report": {
      "main": [
        [
          {
            "node": "IF report shows vulnerabilities or alerts, send message to discord",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if SSL-Checker.io is available": {
      "main": [
        [
          {
            "node": "IF site available, then run SSL check",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Check SSL using SSL-Checker.io": {
      "main": [
        [
          {
            "node": "IF expiry is in less than 7 days, send message to discord",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF site available, then run SSL check": {
      "main": [
        [
          {
            "node": "Check SSL using SSL-Checker.io",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Site Unreachable",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send SSL Health info to Discord": {
      "main": [
        []
      ]
    },
    "IF report shows vulnerabilities or alerts, send message to discord": {
      "main": [
        [
          {
            "node": "Send SSL Health info to Discord",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF expiry is in less than 7 days, send message to discord": {
      "main": [
        [
          {
            "node": "Send SSL Expiry info to Discord",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze SSL using ssl-health-assessment script over SSH": {
      "main": [
        [
          {
            "node": "Format output report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-07-31T11:39:02.168Z",
  "id": "D3DpOZOFo4Mazvt7",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "SSL-Health-Check",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 10
            }
          ]
        }
      },
      "id": "ff88f266-2386-4e10-b215-261c8ce894e5",
      "name": "Daily Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        1696,
        864
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "24130ff0-983f-80bc-ac6b-dfd47de84dde",
          "mode": "list",
          "cachedResultName": "Public & Private Access",
          "cachedResultUrl": "https://www.notion.so/24130ff0983f80bcac6bdfd47de84dde"
        },
        "returnAll": true,
        "filterType": "manual",
        "options": {}
      },
      "id": "45a91f2c-e49e-4c5f-89a2-92e469c56a29",
      "name": "Fetch domains to check SSL",
      "type": "n8n-nodes-base.notion",
      "position": [
        1920,
        864
      ],
      "typeVersion": 2.2,
      "credentials": {
        "notionApi": {
          "id": "gpKowbfn1acGt4dm",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node - Parse SSL Scanner Output\n// This code processes the SSH node output and formats it for Discord notifications\n\nconst results = [];\n\nfor (const item of $input.all()) {\n  try {\n    // Extract the stdout from SSH response\n    const sshOutput = item.json;\n    \n    // Check if SSH command was successful\n    if (sshOutput.code !== 0) {\n      results.push({\n        json: {\n          hostname: 'unknown',\n          status: 'error',\n          error: sshOutput.stderr || 'SSH command failed',\n          alert: true,\n          alertLevel: 'critical'\n        }\n      });\n      continue;\n    }\n    \n    // Parse the JSON output from stdout\n    let sslData;\n    try {\n      sslData = JSON.parse(sshOutput.stdout);\n    } catch (parseError) {\n      results.push({\n        json: {\n          hostname: 'unknown',\n          status: 'error',\n          error: 'Failed to parse SSL scanner output',\n          alert: true,\n          alertLevel: 'critical'\n        }\n      });\n      continue;\n    }\n    \n    // Extract key information for Discord notification\n    const parsedResult = {\n      // Basic info\n      hostname: sslData.hostname,\n      port: sslData.port || 443,\n      scanTime: sslData.scanTime,\n      scanDuration: sslData.scanDuration,\n      \n      // Overall status\n      overallGrade: sslData.overallGrade,\n      connectionStatus: sslData.connectionStatus || 'unknown',\n      success: sslData.success || false,\n      \n      // Certificate info\n      certificate: {\n        subject: sslData.certificate?.subject || 'unknown',\n        issuer: sslData.certificate?.issuer || 'unknown',\n        validUntil: sslData.certificate?.validUntil,\n        daysUntilExpiry: sslData.certificate?.daysUntilExpiry,\n        isValid: sslData.certificate?.isValid || false,\n        issues: sslData.certificate?.issues || [],\n        hostnameMatch: sslData.certificate?.hostnameMatch || false\n      },\n      \n      // Protocol support\n      protocols: {\n        tls13: sslData.protocols?.tls13 || false,\n        tls12: sslData.protocols?.tls12 || false,\n        tls11: sslData.protocols?.tls11 || false,\n        tls10: sslData.protocols?.tls10 || false,\n        ssl3: sslData.protocols?.ssl3 || false\n      },\n      \n      // Security info\n      vulnerabilities: {\n        hasVulnerabilities: sslData.vulnerabilities?.hasVulnerabilities || false,\n        poodle: sslData.vulnerabilities?.poodle || false,\n        freak: sslData.vulnerabilities?.freak || false,\n        details: sslData.vulnerabilities || {}\n      },\n      \n      // Grades breakdown\n      grades: sslData.grades || {},\n      \n      // Recommendations\n      recommendations: sslData.recommendations || [],\n      \n      // Error handling\n      error: sslData.error,\n      \n      // Alert logic\n      alert: false,\n      alertLevel: 'info',\n      alertReasons: []\n    };\n    \n    // Determine if this needs an alert\n    const alertReasons = [];\n    let alertLevel = 'info';\n    \n    // Critical alerts\n    if (sslData.error) {\n      alertReasons.push(`Scan failed: ${sslData.error}`);\n      alertLevel = 'critical';\n    }\n    \n    if (!parsedResult.certificate.isValid) {\n      alertReasons.push('Certificate is invalid');\n      alertLevel = 'critical';\n    }\n    \n    if (parsedResult.certificate.daysUntilExpiry <= 0) {\n      alertReasons.push('Certificate has expired');\n      alertLevel = 'critical';\n    }\n    \n    // High priority alerts\n    if (parsedResult.certificate.daysUntilExpiry <= 7 && parsedResult.certificate.daysUntilExpiry > 0) {\n      alertReasons.push(`Certificate expires in ${parsedResult.certificate.daysUntilExpiry} days`);\n      if (alertLevel === 'info') alertLevel = 'high';\n    }\n    \n    if (parsedResult.vulnerabilities.hasVulnerabilities) {\n      alertReasons.push('Security vulnerabilities detected');\n      if (alertLevel === 'info') alertLevel = 'high';\n    }\n    \n    if (!parsedResult.certificate.hostnameMatch) {\n      alertReasons.push('Hostname mismatch detected');\n      if (alertLevel === 'info') alertLevel = 'high';\n    }\n    \n    // Medium priority alerts\n    if (parsedResult.certificate.daysUntilExpiry <= 30 && parsedResult.certificate.daysUntilExpiry > 7) {\n      alertReasons.push(`Certificate expires in ${parsedResult.certificate.daysUntilExpiry} days`);\n      if (alertLevel === 'info') alertLevel = 'medium';\n    }\n    \n    if (['C', 'D', 'F'].includes(parsedResult.overallGrade)) {\n      alertReasons.push(`Poor SSL grade: ${parsedResult.overallGrade}`);\n      if (alertLevel === 'info') alertLevel = 'medium';\n    }\n    \n    if (parsedResult.protocols.ssl3 || parsedResult.protocols.tls10) {\n      alertReasons.push('Deprecated protocols enabled');\n      if (alertLevel === 'info') alertLevel = 'medium';\n    }\n    \n    // Low priority alerts\n    if (parsedResult.recommendations && parsedResult.recommendations.length > 0) {\n      alertReasons.push(`${parsedResult.recommendations.length} recommendations available`);\n      if (alertLevel === 'info') alertLevel = 'low';\n    }\n    \n    // Set alert status\n    parsedResult.alert = alertReasons.length > 0;\n    parsedResult.alertLevel = alertLevel;\n    parsedResult.alertReasons = alertReasons;\n    \n    // Add Discord formatting helpers\n    parsedResult.discord = {\n      color: getDiscordColor(alertLevel, parsedResult.overallGrade),\n      title: `SSL Health Check: ${parsedResult.hostname}`,\n      description: getDiscordDescription(parsedResult),\n      fields: getDiscordFields(parsedResult),\n      timestamp: new Date().toISOString(),\n      \n      // Pre-formatted content for easy Discord input\n      content: alertLevel === 'critical' ? '@here üö® SSL Health Monitor Alert' : 'üîê SSL Health Monitor Alert',\n      \n      // Simple descriptions without complex logic\n      simpleDescription: parsedResult.alert \n        ? `‚ö†Ô∏è SSL issues detected for ${parsedResult.hostname}`\n        : `‚úÖ SSL looks healthy for ${parsedResult.hostname}`,\n        \n      // Detailed info as simple strings\n      certificateInfo: `Grade: ${parsedResult.overallGrade} | Expires in ${parsedResult.certificate.daysUntilExpiry} days`,\n      \n      // Alert details as simple string\n      alertSummary: parsedResult.alert \n        ? `Issues: ${parsedResult.alertReasons.join(', ')}`\n        : `Certificate expires ${parsedResult.certificate.validUntil}`,\n        \n      // Complete formatted description\n      fullDescription: getFullDiscordDescription(parsedResult)\n    };\n    \n    results.push({ json: parsedResult });\n    \n  } catch (error) {\n    // Handle any unexpected errors\n    results.push({\n      json: {\n        hostname: 'unknown',\n        status: 'error',\n        error: `Processing error: ${error.message}`,\n        alert: true,\n        alertLevel: 'critical'\n      }\n    });\n  }\n}\n\n// Helper functions for Discord formatting\nfunction getDiscordColor(alertLevel, grade) {\n  // Color mapping for Discord embeds\n  const colors = {\n    critical: 15158332, // Red\n    high: 15105570,     // Orange\n    medium: 15844367,   // Yellow\n    low: 5763719,       // Blue\n    info: 5763719       // Blue\n  };\n  \n  // Grade-based colors for non-alerts\n  const gradeColors = {\n    'A+': 5763719,  // Green\n    'A': 3066993,   // Green\n    'B': 15844367,  // Yellow\n    'C': 15105570,  // Orange\n    'D': 15158332,  // Red\n    'F': 10038562   // Dark Red\n  };\n  \n  if (alertLevel !== 'info') {\n    return colors[alertLevel] || colors.info;\n  }\n  \n  return gradeColors[grade] || colors.info;\n}\n\nfunction getFullDiscordDescription(result) {\n  if (result.error) {\n    return `‚ùå SSL scan failed: ${result.error}`;\n  }\n  \n  if (result.alert) {\n    let description = `‚ö†Ô∏è SSL issues detected for ${result.hostname}\\n`;\n    description += `Grade: ${result.overallGrade} | Expires in ${result.certificate.daysUntilExpiry} days\\n\\n`;\n    description += `Issues found:\\n`;\n    result.alertReasons.forEach(reason => {\n      description += `‚Ä¢ ${reason}\\n`;\n    });\n    return description.trim();\n  }\n  \n  return `‚úÖ SSL configuration looks good for ${result.hostname}\\nGrade: ${result.overallGrade} | Certificate expires in ${result.certificate.daysUntilExpiry} days`;\n}\n\nfunction getDiscordDescription(result) {\n  if (result.error) {\n    return `‚ùå SSL scan failed: ${result.error}`;\n  }\n  \n  if (result.alert) {\n    // Create simple alert description\n    let description = \"‚ö†Ô∏è SSL issues detected:\\n\";\n    result.alertReasons.forEach(reason => {\n      description += `‚Ä¢ ${reason}\\n`;\n    });\n    return description.trim();\n  }\n  \n  return `‚úÖ SSL configuration looks good\\nGrade: ${result.overallGrade} | Expires in ${result.certificate.daysUntilExpiry} days`;\n}\n\nfunction getDiscordFields(result) {\n  const fields = [];\n  \n  // Certificate info\n  fields.push({\n    name: \"üìú Certificate\",\n    value: [\n      `**Subject:** ${result.certificate.subject}`,\n      `**Issuer:** ${result.certificate.issuer}`,\n      `**Expires:** ${new Date(result.certificate.validUntil).toLocaleDateString()}`,\n      `**Days Left:** ${result.certificate.daysUntilExpiry}`\n    ].join('\\n'),\n    inline: true\n  });\n  \n  // Security info\n  fields.push({\n    name: \"üîê Security\",\n    value: [\n      `**Overall Grade:** ${result.overallGrade}`,\n      `**TLS 1.2:** ${result.protocols.tls12 ? '‚úÖ' : '‚ùå'}`,\n      `**TLS 1.3:** ${result.protocols.tls13 ? '‚úÖ' : '‚ùå'}`,\n      `**Vulnerabilities:** ${result.vulnerabilities.hasVulnerabilities ? '‚ö†Ô∏è Found' : '‚úÖ None'}`\n    ].join('\\n'),\n    inline: true\n  });\n  \n  // Add recommendations if any\n  if (result.recommendations.length > 0) {\n    fields.push({\n      name: \"üí° Recommendations\",\n      value: result.recommendations.slice(0, 3).map(rec => `‚Ä¢ ${rec.message || rec}`).join('\\n') + \n             (result.recommendations.length > 3 ? `\\n... and ${result.recommendations.length - 3} more` : ''),\n      inline: false\n    });\n  }\n  \n  return fields;\n}\n\nreturn results;"
      },
      "id": "09954c53-8646-432a-869d-2f79dc9086c1",
      "name": "Format output report",
      "type": "n8n-nodes-base.code",
      "position": [
        2368,
        960
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "url": "http://ssl-checker.io/",
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          },
          "timeout": 10000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2144,
        768
      ],
      "id": "8037354d-0d19-46d3-b6cb-f9b7018ade33",
      "name": "Check if SSL-Checker.io is available",
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "=https://ssl-checker.io/api/v1/check/{{ $json[\"property_url\"].replace(/^https?:\\/\\//, \"\").replace(/\\/$/, \"\") }}",
        "options": {}
      },
      "id": "d0b66bd8-f8eb-4e80-8991-9487cb95cf47",
      "name": "Check SSL using SSL-Checker.io",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2592,
        768
      ],
      "typeVersion": 4.2,
      "retryOnFail": true,
      "maxTries": 5
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e56a39dd-5d9c-462c-ac44-203fef685fb0",
              "leftValue": "={{ $json.statusCode }}",
              "rightValue": 200,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2368,
        768
      ],
      "id": "09b79bb6-6735-49c0-bd7f-ee1d71d84e48",
      "name": "IF site available, then run SSL check"
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "982441645201043456",
          "mode": "list",
          "cachedResultName": "Hyvecloud Lab",
          "cachedResultUrl": "https://discord.com/channels/982441645201043456"
        },
        "channelId": {
          "__rl": true,
          "value": "1400494272347639849",
          "mode": "list",
          "cachedResultName": "ssl-web-alerts",
          "cachedResultUrl": "https://discord.com/channels/982441645201043456/1400494272347639849"
        },
        "content": "=SSL Expiry - {{ $json.result.days_left }} days Left - {{ $json.result.host }}",
        "options": {}
      },
      "id": "35c3b85c-3e38-4b98-88d1-5a7b2b7b2457",
      "name": "Send SSL Expiry info to Discord",
      "type": "n8n-nodes-base.discord",
      "position": [
        3040,
        768
      ],
      "webhookId": "6e1014b5-d89d-4939-a1f3-b74c280ae73b",
      "typeVersion": 2,
      "credentials": {
        "discordBotApi": {
          "id": "M57pmgQdTuSopxil",
          "name": "Discord Bot account"
        }
      }
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "982441645201043456",
          "mode": "list",
          "cachedResultName": "Hyvecloud Lab",
          "cachedResultUrl": "https://discord.com/channels/982441645201043456"
        },
        "channelId": {
          "__rl": true,
          "value": "1400494272347639849",
          "mode": "list",
          "cachedResultName": "ssl-web-alerts",
          "cachedResultUrl": "https://discord.com/channels/982441645201043456/1400494272347639849"
        },
        "content": "={{ $json.discord.title }}\n\n{{ $json.discord.fullDescription }}",
        "options": {}
      },
      "id": "9a44cdf7-0306-48eb-9b76-bde73b88b375",
      "name": "Send SSL Health info to Discord",
      "type": "n8n-nodes-base.discord",
      "position": [
        2816,
        960
      ],
      "webhookId": "6e1014b5-d89d-4939-a1f3-b74c280ae73b",
      "typeVersion": 2,
      "credentials": {
        "discordBotApi": {
          "id": "M57pmgQdTuSopxil",
          "name": "Discord Bot account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "1b96ecab-c406-402b-8a88-d0496c64468a",
              "leftValue": "={{ $json.vulnerabilities.hasVulnerabilities }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "a68b9b88-5e05-44b6-82f0-7c39658566dd",
              "leftValue": "={{ $json.alert }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2592,
        960
      ],
      "id": "e94e6ecf-011f-4e82-aba7-7a2f112a24b7",
      "name": "IF report shows vulnerabilities or alerts, send message to discord"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "ee6e2ce8-569a-4f1f-91b5-2c55f605a16b",
              "operator": {
                "type": "number",
                "operation": "lte"
              },
              "leftValue": "={{ $json.result.days_left }}",
              "rightValue": 7
            },
            {
              "id": "d82f8203-0908-4a48-9eb7-48e11555c1c2",
              "operator": {
                "name": "filter.operator.equals",
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "c39219ce-1fbf-44ff-9d1e-41ad54219956",
      "name": "IF expiry is in less than 7 days, send message to discord",
      "type": "n8n-nodes-base.if",
      "position": [
        2816,
        768
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "authentication": "privateKey",
        "command": "=node /opt/sysadmin-toolkit/scripts/ssl/ssl-health-assessment.js {{ $json.property_url }} --json"
      },
      "id": "399dac94-d8f0-4617-be15-bed4ba0bcb7d",
      "name": "Analyze SSL using ssl-health-assessment script over SSH",
      "type": "n8n-nodes-base.ssh",
      "position": [
        2144,
        960
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "credentials": {
        "sshPrivateKey": {
          "id": "94aRoOCVgUKV1Vnc",
          "name": "SSH Password account"
        }
      }
    },
    {
      "parameters": {
        "errorMessage": "'http://ssl-checker.io/' currently unavailable"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        2592,
        624
      ],
      "id": "a75a7bf4-3026-47c1-9bd2-a3a63412ed05",
      "name": "Site Unreachable"
    }
  ],
  "origin": "n8n",
  "pinData": {},
  "repo": {
    "owner": "adam-beckett-1999",
    "name": "N8n-Workflows"
  },
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "le6yQQKzOHovEcgL"
  },
  "staticData": {
    "node:Daily Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [
    {
      "createdAt": "2025-07-31T16:32:14.153Z",
      "updatedAt": "2025-07-31T16:32:14.153Z",
      "id": "KIc4s4W1XMQtnuYG",
      "name": "HTTPS"
    },
    {
      "createdAt": "2025-07-31T16:32:10.975Z",
      "updatedAt": "2025-07-31T16:32:10.975Z",
      "id": "NISJGDYKrVa3wARO",
      "name": "Reverse-Proxy"
    },
    {
      "createdAt": "2025-07-31T16:32:05.649Z",
      "updatedAt": "2025-07-31T16:32:05.649Z",
      "id": "rerJPZWHmDKuzDyS",
      "name": "SSL"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-08-04T09:43:30.000Z",
  "versionId": "abc23db8-1599-493d-a5dd-e0bbf4af52c5"
}